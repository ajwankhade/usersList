{"version":3,"sources":["actions/usersList.js","reducers/users.js","reducers/usersDataLoading.js","reducers/usersData.js","reducers/userAddressesData.js","reducers/app.js","store.js","components/usersList/UsersList.jsx","containers/UserListContainer.js","serverCalls/FetchUsers.js","serverCalls/FetchUserAddresses.js","actions/userAddresses.js","components/userAddresses/UserAddresses.jsx","containers/UserAddressesContainer.js","components/appHeader/index.js","components/appHeader/AppHeader.jsx","App.js","serviceWorker.js","index.js"],"names":["setUsersDataLoading","flag","dispatch","type","initialState","users","state","action","userData","usersDataLoading","usersData","combineReducers","userAddresses","userAddressesLoading","userAddressesData","userId","createStore","appReducer","applyMiddleware","thunkMiddleware","UsersList","this","props","userDataLoading","length","map","user","key","id","onClick","setSelectedUser","name","age","gender","React","Component","UserListContainer","store","axios","get","then","data","setUsers","catch","console","log","connect","FetchUserAddresses","setUserAddressesLoading","setUserAddresses","UserAddresses","selectedUserId","UserAddressesContainer","fetchUserData","nextProps","undefined","AppHeader","className","App","useState","setSelectedUserId","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.a182058e.chunk.js","sourcesContent":["export const setUsers = (userData = []) => dispatch => {\n\tdispatch({\n\t\ttype: 'SET_USERS',\n\t\tuserData\n\t})\n}\n\nexport const setUsersDataLoading = (flag = false) => dispatch => {\n\tdispatch({\n\t\ttype: 'SET_USERS_DATA_LOADING',\n\t\tflag\n\t})\n}","const initialState = []\n\nconst users = (state = initialState, action = {}) => {\n\tswitch (action.type) {\n\t\tcase 'SET_USERS':\n\t\t\treturn action.userData\n\t\tdefault:\n\t\t\treturn state;\n\t}\n};\n\nexport default users;","const initialState = false\n\nconst usersDataLoading = (state = initialState, action = {}) => {\n\tswitch (action.type) {\n\t\tcase 'SET_USERS_DATA_LOADING':\n\t\t\treturn action.flag\n\t\tdefault:\n\t\t\treturn state;\n\t}\n};\n\nexport default usersDataLoading;","import { combineReducers } from 'redux';\nimport users from './users';\nimport usersDataLoading from './usersDataLoading';\n\nconst usersData = combineReducers({\n\tusers,\n\tusersDataLoading\n});\n\nexport default usersData;","const initialState = {\n\tuserAddresses: {},\n\tuserAddressesLoading: false\n}\n\nconst userAddressesData = (state = initialState, action = {}) => {\n\tswitch (action.type) {\n\t\tcase 'SET_USER_ADDRESSES':\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tuserAddresses: {\n\t\t\t\t\t...state.userAddresses,\n\t\t\t\t\t[action.userId]: action.userAddresses\n\t\t\t\t},\n\t\t\t\tuserAddressesLoading: false\n\t\t\t}\n\t\tcase 'SET_USER_ADDRESSES_LOADING':\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tuserAddressesLoading: action.flag\n\t\t\t}\n\t\tdefault:\n\t\t\treturn state;\n\t}\n};\n\nexport default userAddressesData;","import { combineReducers } from 'redux';\nimport usersData from './usersData';\nimport userAddressesData from './userAddressesData';\n\nexport default combineReducers({\n\tusersData,\n\tuserAddressesData\n});","import { createStore, applyMiddleware } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport appReducer from './reducers/app.js';\n\nexport default createStore(appReducer, applyMiddleware(thunkMiddleware));","import React from 'react';\n\nclass UsersList extends React.Component {\n\n\trender() {\n\t\tconst { users, userDataLoading } = this.props;\n\n\t\tif (userDataLoading) {\n\t\t\treturn <div>Loading users...</div>\n\t\t}\n\n\t\tif (users.length === 0) {\n\t\t\treturn <div>There are no users available</div>\n\t\t}\n\n\t\treturn (\n\t\t\tusers.map(user => {\n\t\t\t\treturn (\n\t\t\t\t\t<div key={`user_${user.id}`} onClick={() => this.props.setSelectedUser(user.id)}>\n\t\t\t\t\t\t<span>{user.id}</span>\n\t\t\t\t\t\t<span>{user.name}</span>\n\t\t\t\t\t\t<span>{user.age}</span>\n\t\t\t\t\t\t<span>{user.gender}</span>\n\t\t\t\t\t</div>\n\t\t\t\t)\n\t\t\t})\n\t\t)\n\t}\n}\n\nexport default UsersList;","import React from 'react';\nimport { connect } from 'react-redux';\nimport { FetchUsers } from '../serverCalls/FetchUsers.js';\nimport UsersList from '../components/usersList/UsersList.jsx';\n\nclass UserListContainer extends React.Component {\n\tcomponentDidMount() {\n\t\tFetchUsers();\n\t}\n\n\trender() {\n\t\treturn <UsersList {...this.props} />\n\t}\n}\n\nconst mapStateToProps = state => ({\n\tusers: state.usersData.users,\n\tuserDataLoading: state.usersData.usersDataLoading\n})\n\nconst mapDispatchToProps = dispatch => ({\n\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserListContainer);","import axios from \"axios\";\nimport {\n\tsetUsers,\n\tsetUsersDataLoading\n} from '../actions/usersList.js';\nimport store from '../store';\n\nexport const FetchUsers = () => {\n\tstore.dispatch(setUsersDataLoading(true));\n\treturn axios\n\t\t.get(\n\t\t\t\"http://demo5472662.mockable.io/users\"\n\t\t)\n\t\t.then(({ data }) => {\n\t\t\tstore.dispatch(setUsers(data));\n\t\t\tstore.dispatch(setUsersDataLoading(false));\n\t\t})\n\t\t.catch(() => {\n\t\t\tconsole.log(\"error while fetching users\");\n\t\t});\n}","import axios from \"axios\";\nimport {\n\tsetUserAddresses,\n\tsetUserAddressesLoading\n} from '../actions/userAddresses.js';\nimport store from '../store';\n\nexport const FetchUserAddresses = (userId) => {\n\tstore.dispatch(setUserAddressesLoading(true));\n\taxios\n\t\t.get(\n\t\t\t`http://demo5472662.mockable.io/user${userId}_addresses`\n\t\t)\n\t\t.then(({ data }) => {\n\t\t\tstore.dispatch(setUserAddresses(userId, data));\n\t\t});\n}","export const setUserAddresses = (userId, userAddresses = []) => dispatch => {\n\tdispatch({\n\t\ttype: 'SET_USER_ADDRESSES',\n\t\tuserAddresses,\n\t\tuserId\n\t})\n}\n\nexport const setUserAddressesLoading = (flag = false) => dispatch => {\n\tdispatch({\n\t\ttype: 'SET_USER_ADDRESSES_LOADING',\n\t\tflag\n\t})\n}","import React from 'react';\n\nclass UserAddresses extends React.Component {\n\n\trender() {\n\t\tif (!this.props.selectedUserId) return null;\n\t\tif (this.props.userAddressesLoading) return <div>Loading address...</div>\n\t\treturn <div>User Id {this.props.selectedUserId}'s Address</div>;\n\t}\n}\n\nexport default UserAddresses;","import React from 'react';\nimport { FetchUserAddresses } from '../serverCalls/FetchUserAddresses.js';\nimport { connect } from 'react-redux';\nimport UserAddresses from '../components/userAddresses/UserAddresses.jsx';\n\nclass UserAddressesContainer extends React.Component {\n\n\tfetchUserData = (userId) => {\n\t\tFetchUserAddresses(userId)\n\t}\n\n\tcomponentWillReceiveProps(nextProps) {\n\t\tif (\n\t\t\tthis.props.selectedUserId !== nextProps.selectedUserId\n\t\t\t&& this.props.userAddresses[nextProps.selectedUserId] === undefined\n\t\t)\n\t\t\tthis.fetchUserData(nextProps.selectedUserId)\n\t}\n\n\trender() {\n\t\treturn <UserAddresses {...this.props} />\n\t}\n}\n\nconst mapStateToProps = state => ({\n\tuserAddresses: state.userAddressesData.userAddresses,\n\tuserAddressesLoading: state.userAddressesData.userAddressesLoading\n})\n\nconst mapDispatchToProps = dispatch => ({\n\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserAddressesContainer);","import AppHeader from './AppHeader';\n\nexport default AppHeader","import React from 'react';\nimport './appHeader.scss';\n\nclass AppHeader extends React.Component {\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"app-header-container\">\n\t\t\t\t<h1 className=\"header-text\">\n\t\t\t\t\tUser Details Portal\n\t\t\t\t</h1>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default AppHeader;","import React, { useState } from 'react';\nimport './App.css';\nimport UserListContainer from './containers/UserListContainer.js';\nimport UserAddressesContainer from './containers/UserAddressesContainer.js';\nimport AppHeader from './components/appHeader';\n\nconst App = () => {\n\n  const [selectedUserId, setSelectedUserId] = useState(null);\n\n  const setSelectedUser = (userId) => {\n    setSelectedUserId(userId)\n  }\n\n  return (\n    <div className=\"App\">\n      <AppHeader />\n      <UserListContainer\n        setSelectedUser={setSelectedUser}\n      />\n      <UserAddressesContainer selectedUserId={selectedUserId} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport store from './store'\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<Provider store={store}>\n\t\t\t<App />\n\t\t</Provider>\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}