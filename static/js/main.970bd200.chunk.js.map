{"version":3,"sources":["actions/usersList.js","components/usersList/UserRow.jsx","components/usersList/UsersList.jsx","containers/UserListContainer.js","serverCalls/FetchUsers.js","components/userAddresses/AddressCard.jsx","components/userAddresses/UserAddresses.jsx","containers/UserAddressesContainer.js","serverCalls/FetchUserAddresses.js","actions/userAddresses.js","components/appHeader/index.js","components/appHeader/AppHeader.jsx","App.js","serviceWorker.js","reducers/users.js","reducers/usersDataLoading.js","reducers/usersData.js","reducers/userAddressesData.js","reducers/app.js","store.js","index.js"],"names":["setUsersDataLoading","flag","dispatch","type","UserRow","user","this","props","className","isSelected","key","id","onClick","setSelectedUser","name","age","gender","React","Component","UsersList","getUsersContent","users","selectedUserId","userDataLoading","length","map","UserListContainer","fetchUsers","connect","state","usersData","usersDataLoading","axios","get","then","data","userData","setUsers","catch","console","log","AddressCard","getAddressFormatted","address","house_no","street_name","city_name","country","dangerouslySetInnerHTML","__html","UserAddresses","getAddressCards","selectedUser","userAddress","userAddressesLoading","address_id","UserAddressesContainer","fetchUserAddresses","ownProps","addresses","userAddressesData","userAddresses","userId","setUserAddressesLoading","setUserAddresses","FetchUserAddresses","AppHeader","App","useState","setSelectedUserId","style","width","color","textAlign","Boolean","window","location","hostname","match","initialState","action","combineReducers","createStore","appReducer","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"gXAOaA,EAAsB,eAACC,EAAD,+DAAkB,SAAAC,GACpDA,EAAS,CACRC,KAAM,yBACNF,WCYaG,G,6KAlBJ,IAAD,OACAC,EAASC,KAAKC,MAAdF,KAER,OACC,yBACCG,UAAS,kBAAaF,KAAKC,MAAME,WAAa,YAAc,IAC5DC,IAAG,eAAUL,EAAKM,IAClBC,QAAS,kBAAM,EAAKL,MAAMM,gBAAgBR,EAAKM,GAAIN,KAEnD,6BAAMA,EAAKM,IACX,6BAAMN,EAAKS,MACX,6BAAMT,EAAKU,KACX,6BAAMV,EAAKW,a,GAbOC,IAAMC,YC2CbC,E,4MAxCdC,gBAAkB,WAAO,IAAD,EAC4B,EAAKb,MAAhDc,EADe,EACfA,MAAOC,EADQ,EACRA,eAEf,OAHuB,EACQC,gBAGvB,yBAAKf,UAAU,wBAAf,oBAGa,IAAjBa,EAAMG,OACF,yBAAKhB,UAAU,wBAAf,gCAGDa,EAAMI,KAAI,SAAApB,GAChB,OAAO,kBAAC,EAAD,CACNK,IAAG,eAAUL,EAAKM,IAClBN,KAAMA,EACNQ,gBAAiB,EAAKN,MAAMM,gBAC5BJ,WAAYa,IAAmBjB,EAAKM,S,uDAOtC,OACC,yBAAKH,UAAU,wBACd,wBAAIA,UAAU,oBAAd,SACA,yBAAKA,UAAU,SACd,yBAAKA,UAAU,mBACd,wCACA,0CACA,yCACA,wCAEAF,KAAKc,wB,GAnCaH,IAAMC,WCCxBQ,E,kLAEJpB,KAAKC,MAAMoB,e,+BAIX,OAAO,kBAAC,EAAcrB,KAAKC,W,GANGU,IAAMC,WAmBvBU,eATS,SAAAC,GAAK,MAAK,CACjCR,MAAOQ,EAAMC,UAAUT,MACvBE,gBAAiBM,EAAMC,UAAUC,qBAGP,SAAA7B,GAAQ,MAAK,CACvCyB,WAAY,kBAAMzB,GCfa,SAAAA,GAE/B,OADAA,EAASF,GAAoB,IACtBgC,IACLC,IACA,wCAEAC,MAAK,YAAe,IAAZC,EAAW,EAAXA,KACRjC,EJbqB,eAACkC,EAAD,uDAAY,GAAZ,OAAmB,SAAAlC,GAC1CA,EAAS,CACRC,KAAM,YACNiC,cIUUC,CAASF,IAClBjC,EAASF,GAAoB,OAE7BsC,OAAM,WACNC,QAAQC,IAAI,wCDOAZ,CAA6CF,GEF7Ce,G,kNAjBdC,oBAAsB,WAAO,IACpBC,EAAY,EAAKpC,MAAjBoC,QACR,MAAM,GAAN,OAAUA,EAAQC,SAAlB,cAAgCD,EAAQE,YAAxC,cAAyDF,EAAQG,UAAjE,cAAgFH,EAAQI,U,uDAKxF,OACC,yBACCvC,UAAU,eACVwC,wBAAyB,CAAEC,OAAQ3C,KAAKoC,6B,GAZlBzB,IAAMC,YCyCjBgC,E,4MAtCdC,gBAAkB,WAAO,IAAD,EAKnB,EAAK5C,MAHR6C,EAFsB,EAEtBA,aACAC,EAHsB,EAGtBA,YAID,OAPuB,EAItBC,qBAIO,yBAAK9C,UAAU,qBAAf,sBAEmB,IAAvB6C,EAAY7B,OACR,yBAAKhB,UAAU,qBAAf,+BAGD6C,EAAY5B,KAAI,SAAAkB,GACtB,OAAO,kBAAC,EAAD,CACNjC,IAAG,kBAAaiC,EAAQY,WAArB,iBAAwCH,EAAazC,IACxDgC,QAASA,Q,uDAKF,IACDS,EAAiB9C,KAAKC,MAAtB6C,aAER,OACC,yBAAK5C,UAAU,qBACd,wBAAIA,UAAU,eACZ4C,EAAatC,KADf,gBAGA,yBAAKN,UAAU,2BACbF,KAAK6C,wB,GAjCiBlC,IAAMC,WCC5BsC,E,kLAGkC,IAAlClD,KAAKC,MAAM8C,YAAY7B,QAC1BlB,KAAKC,MAAMkD,mBAAmBnD,KAAKC,MAAMe,kB,+BAI1C,OAAO,kBAAC,EAAkBhB,KAAKC,W,GARIU,IAAMC,WA2B5BU,eAVS,SAACC,EAAO6B,GAC/B,MAAO,CACNL,aAPsBM,EAOM9B,EAAM+B,kBAAkBC,cAPnBC,EAOkCJ,EAASpC,eANxEqC,GACEA,EAAUG,IADM,IAOtBR,qBAAsBzB,EAAM+B,kBAAkBN,sBARzB,IAACK,EAAWG,KAWR,SAAA5D,GAAQ,MAAK,CACvCuD,mBAAoB,SAACK,GAAD,OAAY5D,ECvBC,SAAC4D,GAAD,OAAY,SAAA5D,GAC7CA,ECCsC,eAACD,EAAD,+DAAkB,SAAAC,GACxDA,EAAS,CACRC,KAAM,6BACNF,UDJQ8D,EAAwB,IACjC/B,IACEC,IADF,6CAEwC6B,EAFxC,eAIE5B,MAAK,YAAe,IAAZC,EAAW,EAAXA,KACRjC,ECb6B,SAAC4D,GAAD,IAASD,EAAT,uDAAyB,GAAzB,OAAgC,SAAA3D,GAC/DA,EAAS,CACRC,KAAM,qBACN0D,gBACAC,YDSUE,CAAiBF,EAAQ3B,QDgBK8B,CAAmBH,QAG9ClC,CAA6C4B,GG9B7CU,G,6KCIb,OACC,yBAAK1D,UAAU,wBACd,wBAAIA,UAAU,eAAd,4B,GALoBS,IAAMC,YCwCfiD,EArCH,WAAO,IAAD,EAE4BC,mBAAS,MAFrC,mBAET9C,EAFS,KAEO+C,EAFP,OAGwBD,mBAAS,MAHjC,mBAGThB,EAHS,KAGKvC,EAHL,KAUhB,OACE,yBAAKL,UAAU,OACb,kBAAC,EAAD,MACA,yBAAKA,UAAU,WACb,kBAAC,EAAD,CACEc,eAAgBA,EAChBT,gBAXQ,SAACiD,GAAuB,IAAfzD,EAAc,uDAAP,GAC9BgE,EAAkBP,GAClBjD,EAAgBR,MAYViB,EACE,kBAAC,EAAD,CACEZ,IAAG,eAAUY,GACb8B,aAAcA,EACd9B,eAAgBA,IAGlB,yBAAKgD,MAAO,CAAEC,MAAO,SACnB,wBAAID,MAAO,CAAEE,MAAO,OAAQC,UAAW,WAAvC,wBCrBMC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,mBClBAC,EAAe,GAWN1D,EATD,WAAwC,IAAvCQ,EAAsC,uDAA9BkD,EAAcC,EAAgB,uDAAP,GAC7C,OAAQA,EAAO7E,MACd,IAAK,YACJ,OAAO6E,EAAO5C,SACf,QACC,OAAOP,ICIKE,EATU,WAAwC,IAAvCF,EAAsC,wDAAhBmD,EAAgB,uDAAP,GACxD,OAAQA,EAAO7E,MACd,IAAK,yBACJ,OAAO6E,EAAO/E,KACf,QACC,OAAO4B,ICEKC,EALGmD,YAAgB,CACjC5D,QACAU,qB,gBCNKgD,EAAe,CACpBlB,cAAe,GACfP,sBAAsB,GAwBRM,EArBW,WAAwC,IAAvC/B,EAAsC,uDAA9BkD,EAAcC,EAAgB,uDAAP,GACzD,OAAQA,EAAO7E,MACd,IAAK,qBACJ,OAAO,eACH0B,EADJ,CAECgC,cAAc,eACVhC,EAAMgC,cADG,eAEXmB,EAAOlB,OAASkB,EAAOnB,gBAEzBP,sBAAsB,IAExB,IAAK,6BACJ,OAAO,eACHzB,EADJ,CAECyB,qBAAsB0B,EAAO/E,OAE/B,QACC,OAAO4B,IClBKoD,cAAgB,CAC9BnD,YACA8B,sBCFcsB,cAAYC,EAAYC,YAAgBC,MCIvDC,IAASC,OACR,kBAAC,IAAMC,WAAP,KACC,kBAAC,IAAD,CAAUC,MAAOA,GAChB,kBAAC,EAAD,QAGFC,SAASC,eAAe,SPqHnB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5D,MAAK,SAAA6D,GACJA,EAAaC,gBAEd1D,OAAM,SAAA2D,GACL1D,QAAQ0D,MAAMA,EAAMC,c","file":"static/js/main.970bd200.chunk.js","sourcesContent":["export const setUsers = (userData = []) => dispatch => {\n\tdispatch({\n\t\ttype: 'SET_USERS',\n\t\tuserData\n\t})\n}\n\nexport const setUsersDataLoading = (flag = false) => dispatch => {\n\tdispatch({\n\t\ttype: 'SET_USERS_DATA_LOADING',\n\t\tflag\n\t})\n}","import React from 'react';\nimport './styles.scss';\n\nclass UserRow extends React.Component {\n\trender() {\n\t\tconst { user } = this.props;\n\n\t\treturn (\n\t\t\t<div\n\t\t\t\tclassName={`user-row${this.props.isSelected ? ' selected' : ''}`}\n\t\t\t\tkey={`user_${user.id}`}\n\t\t\t\tonClick={() => this.props.setSelectedUser(user.id, user)}\n\t\t\t>\n\t\t\t\t<div>{user.id}</div>\n\t\t\t\t<div>{user.name}</div>\n\t\t\t\t<div>{user.age}</div>\n\t\t\t\t<div>{user.gender}</div>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default UserRow;","import React from 'react';\nimport './styles.scss';\nimport UserRow from './UserRow';\n\nclass UsersList extends React.Component {\n\n\tgetUsersContent = () => {\n\t\tconst { users, selectedUserId, userDataLoading } = this.props;\n\n\t\tif (userDataLoading) {\n\t\t\treturn <div className=\"users-list-container\">Loading users...</div>\n\t\t}\n\n\t\tif (users.length === 0) {\n\t\t\treturn <div className=\"users-list-container\">There are no users available</div>\n\t\t}\n\n\t\treturn users.map(user => {\n\t\t\treturn <UserRow\n\t\t\t\tkey={`user_${user.id}`}\n\t\t\t\tuser={user}\n\t\t\t\tsetSelectedUser={this.props.setSelectedUser}\n\t\t\t\tisSelected={selectedUserId === user.id}\n\t\t\t/>\n\t\t})\n\t}\n\n\trender() {\n\n\t\treturn (\n\t\t\t<div className=\"users-list-container\">\n\t\t\t\t<h2 className=\"container-header\">Users</h2>\n\t\t\t\t<div className=\"users\">\n\t\t\t\t\t<div className=\"user-row-header\">\n\t\t\t\t\t\t<div>User ID</div>\n\t\t\t\t\t\t<div>User Name</div>\n\t\t\t\t\t\t<div>User Age</div>\n\t\t\t\t\t\t<div>Gender</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t{this.getUsersContent()}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default UsersList;","import React from 'react';\nimport { connect } from 'react-redux';\nimport { FetchUsers } from '../serverCalls/FetchUsers.js';\nimport UsersList from '../components/usersList/UsersList.jsx';\n\nclass UserListContainer extends React.Component {\n\tcomponentDidMount() {\n\t\tthis.props.fetchUsers();\n\t}\n\n\trender() {\n\t\treturn <UsersList {...this.props} />\n\t}\n}\n\nconst mapStateToProps = state => ({\n\tusers: state.usersData.users,\n\tuserDataLoading: state.usersData.usersDataLoading\n})\n\nconst mapDispatchToProps = dispatch => ({\n\tfetchUsers: () => dispatch(FetchUsers())\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserListContainer);","import axios from \"axios\";\nimport {\n\tsetUsers,\n\tsetUsersDataLoading\n} from '../actions/usersList.js';\n\nexport const FetchUsers = () => dispatch => {\n\tdispatch(setUsersDataLoading(true));\n\treturn axios\n\t\t.get(\n\t\t\t\"http://demo5472662.mockable.io/users\"\n\t\t)\n\t\t.then(({ data }) => {\n\t\t\tdispatch(setUsers(data));\n\t\t\tdispatch(setUsersDataLoading(false));\n\t\t})\n\t\t.catch(() => {\n\t\t\tconsole.log(\"error while fetching users\");\n\t\t});\n}","import React from 'react';\nimport './userAddresses.scss';\n\nclass AddressCard extends React.Component {\n\n\tgetAddressFormatted = () => {\n\t\tconst { address } = this.props;\n\t\treturn `${address.house_no},\\n${address.street_name},\\n${address.city_name},\\n${address.country}`\n\t}\n\n\trender() {\n\n\t\treturn (\n\t\t\t<div\n\t\t\t\tclassName=\"address-card\"\n\t\t\t\tdangerouslySetInnerHTML={{ __html: this.getAddressFormatted() }}\n\t\t\t>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default AddressCard;","import React from 'react';\nimport './userAddresses.scss';\nimport AddressCard from './AddressCard';\n\nclass UserAddresses extends React.Component {\n\n\tgetAddressCards = () => {\n\t\tconst {\n\t\t\tselectedUser,\n\t\t\tuserAddress,\n\t\t\tuserAddressesLoading\n\t\t} = this.props;\n\n\t\tif (userAddressesLoading)\n\t\t\treturn <div className=\"address-container\">Loading address...</div>\n\n\t\tif (userAddress.length === 0)\n\t\t\treturn <div className=\"address-container\">No addresses for this user!</div>\n\n\n\t\treturn userAddress.map(address => {\n\t\t\treturn <AddressCard\n\t\t\t\tkey={`address_${address.address_id}_user_${selectedUser.id}`}\n\t\t\t\taddress={address}\n\t\t\t/>\n\t\t});\n\t}\n\n\trender() {\n\t\tconst { selectedUser } = this.props;\n\n\t\treturn (\n\t\t\t<div className=\"address-container\">\n\t\t\t\t<h2 className=\"header-text\">\n\t\t\t\t\t{selectedUser.name}'s Addresses\n\t\t\t\t</h2>\n\t\t\t\t<div className=\"address-cards-container\">\n\t\t\t\t\t{this.getAddressCards()}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default UserAddresses;","import React from 'react';\nimport { FetchUserAddresses } from '../serverCalls/FetchUserAddresses.js';\nimport { connect } from 'react-redux';\nimport UserAddresses from '../components/userAddresses/UserAddresses.jsx';\n\nclass UserAddressesContainer extends React.Component {\n\n\tcomponentDidMount() {\n\t\tif (this.props.userAddress.length === 0)\n\t\t\tthis.props.fetchUserAddresses(this.props.selectedUserId)\n\t}\n\n\trender() {\n\t\treturn <UserAddresses {...this.props} />\n\t}\n}\n\nconst getUserAddress = (addresses, userId) => {\n\tif (!addresses) return [];\n\treturn addresses[userId] || [];\n}\n\nconst mapStateToProps = (state, ownProps) => {\n\treturn {\n\t\tuserAddress: getUserAddress(state.userAddressesData.userAddresses, ownProps.selectedUserId),\n\t\tuserAddressesLoading: state.userAddressesData.userAddressesLoading\n\t}\n}\nconst mapDispatchToProps = dispatch => ({\n\tfetchUserAddresses: (userId) => dispatch(FetchUserAddresses(userId))\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserAddressesContainer);","import axios from \"axios\";\nimport {\n\tsetUserAddresses,\n\tsetUserAddressesLoading\n} from '../actions/userAddresses.js';\n\nexport const FetchUserAddresses = (userId) => dispatch => {\n\tdispatch(setUserAddressesLoading(true));\n\taxios\n\t\t.get(\n\t\t\t`http://demo5472662.mockable.io/user${userId}_addresses`\n\t\t)\n\t\t.then(({ data }) => {\n\t\t\tdispatch(setUserAddresses(userId, data));\n\t\t});\n}","export const setUserAddresses = (userId, userAddresses = []) => dispatch => {\n\tdispatch({\n\t\ttype: 'SET_USER_ADDRESSES',\n\t\tuserAddresses,\n\t\tuserId\n\t})\n}\n\nexport const setUserAddressesLoading = (flag = false) => dispatch => {\n\tdispatch({\n\t\ttype: 'SET_USER_ADDRESSES_LOADING',\n\t\tflag\n\t})\n}","import AppHeader from './AppHeader';\n\nexport default AppHeader","import React from 'react';\nimport './appHeader.scss';\n\nclass AppHeader extends React.Component {\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"app-header-container\">\n\t\t\t\t<h1 className=\"header-text\">\n\t\t\t\t\tUser Details Portal\n\t\t\t\t</h1>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default AppHeader;","import React, { useState } from 'react';\nimport './App.scss';\nimport UserListContainer from './containers/UserListContainer.js';\nimport UserAddressesContainer from './containers/UserAddressesContainer.js';\nimport AppHeader from './components/appHeader';\n\nconst App = () => {\n\n  const [selectedUserId, setSelectedUserId] = useState(null);\n  const [selectedUser, setSelectedUser] = useState(null);\n\n  const setUser = (userId, user = {}) => {\n    setSelectedUserId(userId)\n    setSelectedUser(user)\n  }\n\n  return (\n    <div className=\"App\">\n      <AppHeader />\n      <div className=\"content\">\n        <UserListContainer\n          selectedUserId={selectedUserId}\n          setSelectedUser={setUser}\n        />\n        {\n          selectedUserId ?\n            <UserAddressesContainer\n              key={`user_${selectedUserId}`}\n              selectedUser={selectedUser}\n              selectedUserId={selectedUserId}\n            />\n            :\n            <div style={{ width: '100%' }}>\n              <h2 style={{ color: '#666', textAlign: 'center' }}>\n                No user selected\n\t\t\t\t      </h2>\n            </div>\n        }\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const initialState = []\n\nconst users = (state = initialState, action = {}) => {\n\tswitch (action.type) {\n\t\tcase 'SET_USERS':\n\t\t\treturn action.userData\n\t\tdefault:\n\t\t\treturn state;\n\t}\n};\n\nexport default users;","const initialState = false\n\nconst usersDataLoading = (state = initialState, action = {}) => {\n\tswitch (action.type) {\n\t\tcase 'SET_USERS_DATA_LOADING':\n\t\t\treturn action.flag\n\t\tdefault:\n\t\t\treturn state;\n\t}\n};\n\nexport default usersDataLoading;","import { combineReducers } from 'redux';\nimport users from './users';\nimport usersDataLoading from './usersDataLoading';\n\nconst usersData = combineReducers({\n\tusers,\n\tusersDataLoading\n});\n\nexport default usersData;","const initialState = {\n\tuserAddresses: {},\n\tuserAddressesLoading: false\n}\n\nconst userAddressesData = (state = initialState, action = {}) => {\n\tswitch (action.type) {\n\t\tcase 'SET_USER_ADDRESSES':\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tuserAddresses: {\n\t\t\t\t\t...state.userAddresses,\n\t\t\t\t\t[action.userId]: action.userAddresses\n\t\t\t\t},\n\t\t\t\tuserAddressesLoading: false\n\t\t\t}\n\t\tcase 'SET_USER_ADDRESSES_LOADING':\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tuserAddressesLoading: action.flag\n\t\t\t}\n\t\tdefault:\n\t\t\treturn state;\n\t}\n};\n\nexport default userAddressesData;","import { combineReducers } from 'redux';\nimport usersData from './usersData';\nimport userAddressesData from './userAddressesData';\n\nexport default combineReducers({\n\tusersData,\n\tuserAddressesData\n});","import { createStore, applyMiddleware } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport appReducer from './reducers/app.js';\n\nexport default createStore(appReducer, applyMiddleware(thunkMiddleware));","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport store from './store'\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<Provider store={store}>\n\t\t\t<App />\n\t\t</Provider>\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}